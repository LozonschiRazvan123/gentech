package Controller;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.activitati.*;

import basic.*;

@RestController
@RequestMapping("/track")
public class TrackController {

    private Curs curs;

    public TrackController() {
        initializeData();
    }

    private void initializeData() {
        Trainer trainer = new Trainer("Doe", "John", "New York", 35, false);
        ArrayList<Persoana> exploreri = new ArrayList<>();
        exploreri.add(new Explorer("Smith", "Anna", "Los Angeles", 25, false));
        exploreri.add(new Explorer("Brown", "Michael", "Chicago", 30, true));

        LinkedHashMap<String, Activitate> activitati = new LinkedHashMap<>();
        activitati.put("Material", new Material());
        activitati.put("Rush", new Rush());
        activitati.put("Tema", new Tema());

        curs = new Curs("Java Development", "mediu", trainer, exploreri, 500);
        curs.setActivitati(activitati);
    }

    @GetMapping("/curs")
    public Curs getCurs() {
        return curs;
    }

    @GetMapping("/exploreri")
    public List<Persoana> getExploreri() {
        return curs.getExploreri();
    }

    @GetMapping("/trainer")
    public Persoana getTrainer() {
        return curs.getTrainer();
    }

    @GetMapping("/activitati")
    public Map<String, Activitate> getActivitati() {
        return curs.getActivitati();
    }

    @GetMapping("/activitate")
    public Activitate getActivitateByName(@RequestParam String name) {
        return curs.getActivitati().get(name);
    }

    @GetMapping("/explorer/{id}")
    public Persoana getExplorerById(@PathVariable String id) {
        return curs.getExploreri().stream()
                .filter(e -> e.obtineIdentificator().equals(id))
                .findFirst()
                .orElse(null);
    }
}